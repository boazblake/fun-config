{"version":3,"sources":["../../src/list.mjs"],"names":["Nil","head","undefined","tail","isNil","isCons","Cons","x","xs","curry","f","y","uncurry","o","g","id","flip","cons","snoc","ccons","nil","concat","ys","foldr","foldl","go","b","rev","acc","foldMap","empty","foldM","point","a","chain","map","ap","fs","pure","join","traverse","con_f","sequenceA","length","findIndex","n","index","i","reverse","contains","isJust","unique","toArray","toList","reduceRight","list","args","List"],"mappings":"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","file":"list.js","sourcesContent":["import { Nothing, Just } from 'data.maybe'\r\nimport { equals } from 'ramda'\r\n\r\nclass Nil {\r\n  constructor() {\r\n    this.head = undefined\r\n    this.tail = undefined\r\n    this.isNil = true\r\n    this.isCons = false\r\n  }\r\n}\r\n\r\nclass Cons {\r\n  constructor(x, xs) {\r\n    this.head = x\r\n    this.tail = xs\r\n    this.isNil = false\r\n    this.isCons = true\r\n  }\r\n}\r\n\r\n//curry :: (a -> b -> c) -> a -> b -> c\r\nconst curry = (f) => (x) => (y) => f(x, y)\r\n\r\n//uncurry :: (a -> b -> c) -> (a, b) -> c\r\nconst uncurry = (f) => (x, y) => f(x)(y)\r\n\r\n//o :: ((b -> c), (a -> b)) -> a -> c\r\nconst o = (f, g) => (x) => f(g(x))\r\n\r\n//id :: a -> a\r\nconst id = (x) => x\r\n\r\n//flip :: (a -> b -> c) -> (b, a) -> c\r\nconst flip = (f) => (x, y) => f(y, x)\r\n\r\n//cons :: (a, List a) -> List a\r\nconst cons = (x, xs) => new Cons(x, xs)\r\n\r\n//snoc :: (List a, a) -> List a\r\nconst snoc = (xs, x) => new Cons(x, xs)\r\n\r\n//ccons :: a -> List a -> List a\r\nconst ccons = curry(cons)\r\n\r\n//csnoc :: List a -> a -> List a\r\n//const csnoc = curry(snoc)\r\n\r\n//nil :: () => List a\r\nconst nil = () => new Nil()\r\n\r\n//head :: List a -> a | undefined\r\nconst head = ({ head }) => head\r\n\r\n//tail :: List a -> List a | undefined\r\nconst tail = ({ tail }) => tail\r\n\r\n//concat :: List a -> List a -> List a\r\nconst concat = (xs) => (ys) => foldr(cons)(ys)(xs)\r\n\r\n//foldl :: ((a, b) -> a) -> a -> List b -> a\r\nconst foldl = (f) => {\r\n  const go = (b) => ({ isNil, head, tail }) =>\r\n    isNil ? b : go(f(b, head))(tail)\r\n  return go\r\n}\r\n\r\n//foldr :: ((a, b) -> a) -> a -> List b -> a\r\nconst foldr = (f) => (b) => {\r\n  const rev = (acc) => ({ isNil, head, tail }) =>\r\n    isNil ? acc : rev(cons(head, acc))(tail)\r\n\r\n  return o(foldl(flip(f))(b), rev(nil()))\r\n}\r\n\r\n//foldMap :: Monoid m => (a -> m) -> List a -> m\r\nconst foldMap = (f) =>\r\n  foldl((acc, x) => (acc || f(x).empty()).concat(f(x)))(null)\r\n\r\n//foldM :: Monad m => (a -> m a) -> (a -> b -> m a) -> a -> List b -> m a\r\nconst foldM = (point) => (f) => {\r\n  const go = (a) => ({ isNil, head, tail }) =>\r\n    isNil ? point(a) : f(a, head).chain((x) => go(x)(tail))\r\n  return go\r\n}\r\n\r\n//map :: (a -> b) -> List a -> List b\r\nconst map = (f) => ({ isNil, head, tail }) =>\r\n  isNil ? nil() : cons(f(head), map(f)(tail))\r\n\r\n//ap :: List (a -> b) -> List a -> List b\r\nconst ap = ({ isNil, head: f, tail: fs }) => (xs) =>\r\n  isNil ? nil() : concat(map(f)(xs))(ap(fs)(xs))\r\n\r\n//pure :: a -> List a\r\nconst pure = (a) => cons(a, nil())\r\n\r\n//chain :: (a -> List b) -> List a -> List b\r\nconst chain = ({ isNil, head, tail }) => (f) =>\r\n  isNil ? nil() : concat(f(head))(chain(tail)(f))\r\n\r\n//join :: List (List a -> List a)\r\nconst join = foldr(uncurry(concat))(nil())\r\n\r\n//traverse :: Applicative f => (a -> f a) -> (a -> f b) -> List a -> f (List b)\r\nconst traverse = (point, f) => {\r\n  const con_f = (x, ys) =>\r\n    f(x)\r\n      .map(ccons)\r\n      .ap(ys)\r\n\r\n  return foldr(con_f)(point(nil()))\r\n}\r\n\r\n//sequenceA :: Applicative f => (a -> f a) -> List (f a) -> f (List a)\r\nconst sequenceA = (point) => traverse(point, id)\r\n\r\n//length :: List a -> Int\r\nconst length = (xs) => {\r\n  const go = (b) => ({ isCons, tail }) => (isCons ? go(b + 1)(tail) : b)\r\n\r\n  return go(0)(xs)\r\n}\r\n\r\n//findIndex :: (a -> Boolean) -> List a -> Maybe Int\r\nconst findIndex = (f) => (xs) => {\r\n  const go = (n) => ({ isNil, head, tail }) =>\r\n    isNil ? Nothing() : f(head) ? Just(n) : go(n + 1)(tail)\r\n\r\n  return go(0)(xs)\r\n}\r\n\r\n//index :: Int -> List a -> Maybe a\r\nconst index = (i) => (xs) => {\r\n  const go = (n) => ({ isNil, head, tail }) =>\r\n    isNil ? Nothing() : n === i ? Just(head) : go(n + 1)(tail)\r\n  return go(0)(xs)\r\n}\r\n\r\n//reverse :: List a -> List a\r\nconst reverse = (xs) => {\r\n  const go = (acc) => ({ isNil, head, tail }) =>\r\n    isNil ? acc : go(cons(head, acc))(tail)\r\n\r\n  return go(nil())(xs)\r\n}\r\n\r\n//contains :: Eq a => List a -> a -> Boolean\r\nconst contains = (xs) => (x) => findIndex(equals(x))(xs).isJust\r\n\r\n//unique :: Eq a => List a -> List a\r\nconst unique = o(\r\n  reverse,\r\n  foldl((acc, x) => (contains(acc)(x) ? acc : cons(x, acc)))(nil())\r\n)\r\n\r\n//toArray :: List a -> [a]\r\nconst toArray = foldl((acc, x) => acc.concat([x]))([])\r\n\r\n//toList :: [a] -> List a\r\nconst toList = (xs) => xs.reduceRight((acc, x) => cons(x, acc), nil())\r\n\r\n//List :: a -> ... -> List a\r\nconst list = (...args) => toList(args)\r\n\r\nexport let List = {\r\n  list,\r\n  cons,\r\n  snoc,\r\n  nil,\r\n  head,\r\n  tail,\r\n  foldl,\r\n  foldr,\r\n  foldMap,\r\n  foldM,\r\n  concat,\r\n  map,\r\n  ap,\r\n  pure,\r\n  join,\r\n  chain,\r\n  traverse,\r\n  sequenceA,\r\n  findIndex,\r\n  index,\r\n  length,\r\n  reverse,\r\n  contains,\r\n  unique,\r\n  toArray,\r\n  toList,\r\n}\r\n"]}